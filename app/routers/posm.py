from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import os, csv, datetime

router = Router()
POSM_FILE = "data/posm_log.csv"

def _kb_cancel():
    kb = ReplyKeyboardBuilder()
    kb.button(text="–û—Ç–º–µ–Ω–∞")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

@router.message(F.text == "üì¶ POSM —Å–ø–∏—Å–∞–Ω–∏–µ")
async def posm_start(m: Message):
    m.bot.data.setdefault("posm_state", {})[m.from_user.id] = {"step": 1}
    await m.answer("–ß—Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º? (–º–∞—Ç–µ—Ä–∏–∞–ª/–ø–æ–∑–∏—Ü–∏—è)", reply_markup=_kb_cancel())

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def posm_cancel(m: Message):
    m.bot.data.get("posm_state", {}).pop(m.from_user.id, None)
    await m.answer("–û–∫, –æ—Ç–º–µ–Ω–∏–ª.", reply_markup=None)

@router.message(F.text.regexp(".+"))
async def posm_flow(m: Message):
    state = m.bot.data.get("posm_state", {}).get(m.from_user.id)
    if not state: return
    step = state.get("step", 1)
    if step == 1:
        state["item"] = m.text.strip(); state["step"]=2
        await m.answer("–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?"); return
    if step == 2:
        state["qty"] = m.text.strip(); state["step"]=3
        await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è?"); return
    if step == 3:
        state["venue"] = m.text.strip(); state["step"]=4
        await m.answer("–ö—Ç–æ –æ—Ç–¥–∞—ë—Ç? (–§–ò–û)"); return
    if step == 4:
        state["giver"] = m.text.strip(); state["step"]=5
        await m.answer("–ö—Ç–æ –ø—Ä–∏–Ω—è–ª? (–§–ò–û)"); return
    if step == 5:
        state["receiver"] = m.text.strip()
        os.makedirs("data", exist_ok=True)
        first = not os.path.exists(POSM_FILE)
        with open(POSM_FILE, "a", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            if first: w.writerow(["–î–∞—Ç–∞","–ú–∞—Ç–µ—Ä–∏–∞–ª","–®—Ç","–ó–∞–≤–µ–¥–µ–Ω–∏–µ","–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å","–ü–æ–ª—É—á–∞—Ç–µ–ª—å"])
            w.writerow([datetime.date.today().isoformat(), state["item"], state["qty"], state["venue"], state["giver"], state["receiver"]])
        m.bot.data.get("posm_state", {}).pop(m.from_user.id, None)
        await m.answer("–°–ø–∏—Å–∞–ª ‚úÖ. –ù–∞–ø–∏—à–∏ /posm_export —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å CSV.", reply_markup=None)

@router.message(F.text == "/posm_export")
async def posm_export(m: Message):
    if not os.path.exists(POSM_FILE):
        await m.answer("–ï—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."); return
    await m.answer_document(FSInputFile(POSM_FILE), caption="POSM-–ª–æ–≥")
