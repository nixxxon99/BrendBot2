# app/routers/ai_helper.py
from __future__ import annotations

import asyncio
import time
import logging
from contextlib import suppress
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

# --- —Å–µ—Ä–≤–∏—Å—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ---
from app.services.stats import ai_inc, ai_observe_ms
from app.services.sales_intents import detect_sales_intent

# –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ (JSON)
from app.services.brands import exact_lookup, get_brand, fuzzy_suggest

# KB / RAG (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –Ω–µ —É–ø–∞–¥—ë–º, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç)
try:
    from app.services.knowledge import retrieve as kb_retrieve
except Exception:
    kb_retrieve = None

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è KB-–∫–∞—Ä—Ç–æ—á–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from app.services.knowledge import find_record as kb_find_record, build_caption_from_kb
except Exception:
    kb_find_record = None
    def build_caption_from_kb(_): return ""

# –í–µ–±-–ø–æ–∏—Å–∫ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
from app.services.ai_google import web_search_brand, image_search_brand

# LLM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –µ—Å—Ç—å —Ñ–æ–ª–±—ç–∫)
try:
    from app.services.ai_gemini import generate_caption_with_gemini, generate_sales_playbook_with_gemini
except Exception:
    generate_caption_with_gemini = None
    generate_sales_playbook_with_gemini = None

log = logging.getLogger(__name__)
router = Router()

# =========================
# –ö—ç—à CSE –∏ –∞–Ω—Ç–∏—Å–ø–∞–º/–æ—á–µ—Ä–µ–¥—å
# =========================
AI_USERS: set[int] = set()

_CACHE: dict[str, tuple[float, dict]] = {}
_CACHE_TTL = 60 * 30  # 30 –º–∏–Ω—É—Ç

def _cache_get(key: str):
    item = _CACHE.get(key)
    if not item: return None
    ts, data = item
    if time.time() - ts > _CACHE_TTL:
        _CACHE.pop(key, None)
        return None
    return data

def _cache_set(key: str, data: dict):
    _CACHE[key] = (time.time(), data)

_USER_LOCKS: dict[int, asyncio.Lock] = {}
_USER_LAST: dict[int, float] = {}
_COOLDOWN = 4.0  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def _user_lock(uid: int) -> asyncio.Lock:
    if uid not in _USER_LOCKS:
        _USER_LOCKS[uid] = asyncio.Lock()
    return _USER_LOCKS[uid]

# =========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =========================
AI_ENTRY_BUTTON_TEXT = "ü§ñ AI —Ä–µ–∂–∏–º"
AI_EXIT_BUTTON_TEXT  = "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ AI"

def ai_exit_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ AI", callback_data="ai_exit")]
    ])

# =========================
# –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Telegram
# =========================
import re
_ALLOWED_TAGS = {"b","i","u","s","a","code","pre","br"}

def _sanitize_caption(html: str, limit: int = 1000) -> str:
    if not html: return ""
    # –£–±–µ—Ä—ë–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≥—Ä—É–±–æ
    html = re.sub(r"</?(?:h[1-6]|p|ul|ol|li)>", "", html, flags=re.I)
    # –ü—Ä–∏–≤–µ–¥—ë–º strong/em -> b/i
    html = re.sub(r"<\s*strong\s*>", "<b>", html, flags=re.I)
    html = re.sub(r"<\s*/\s*strong\s*>", "</b>", html, flags=re.I)
    html = re.sub(r"<\s*em\s*>", "<i>", html, flags=re.I)
    html = re.sub(r"<\s*/\s*em\s*>", "</i>", html, flags=re.I)
    # –£–±–µ—Ä—ë–º –ª—é–±—ã–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö (–¥–æ–ø—É—Å—Ç–∏–º –±—Ä—é—Ç–∞–ª—å–Ω–æ)
    def _strip_tag(m):
        tag = m.group(1).lower()
        return m.group(0) if tag in _ALLOWED_TAGS else ""
    html = re.sub(r"</?([a-z0-9]+)(?:\s+[^>]*)?>", _strip_tag, html)
    # –°–∂–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    html = re.sub(r"\n{3,}", "\n\n", html).strip()
    # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É
    if len(html) > limit:
        html = html[:limit-1].rstrip() + "‚Ä¶"
    return html

# =========================
# –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =========================
def _normalize_text(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"\s+", " ", s)
    return s

async def _typing_pulse(m: Message, stop_evt: asyncio.Event):
    """–§–æ–Ω–æ–≤–∞—è ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∞–∑ –≤ 4—Å."""
    try:
        while not stop_evt.is_set():
            with suppress(Exception):
                await m.bot.send_chat_action(m.chat.id, "typing")
            await asyncio.wait_for(stop_evt.wait(), timeout=4.0)
    except asyncio.TimeoutError:
        pass
    except Exception:
        pass

def _cooldown_left(uid: int) -> float:
    last = _USER_LAST.get(uid, 0)
    left = _COOLDOWN - (time.time() - last)
    return max(0.0, left)

def _mark_used(uid: int):
    _USER_LAST[uid] = time.time()

# =========================
# –ë–†–ï–ù–î: —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ (JSON ‚Üí KB)
# =========================
import difflib

def _kb_brand_names() -> list[str]:
    """–í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π KB (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    try:
        from pathlib import Path
        import json
        p = Path("data/brands_kb.json")
        if not p.exists():
            return []
        data = json.loads(p.read_text(encoding="utf-8"))
        names = []
        if isinstance(data, list):
            for it in data:
                n = (it.get("brand") or "").strip()
                if n: names.append(n)
        elif isinstance(data, dict):
            for k, v in data.items():
                if isinstance(v, dict):
                    names.append((v.get("brand") or k).strip())
        return [n for n in names if n]
    except Exception:
        return []

def _guess_brand(q: str) -> Optional[str]:
    # 1) —Ç–æ—á–Ω—ã–π –º–∞—Ç—á –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É
    e = exact_lookup(q)
    if e:
        return e

    # 2) fuzzy –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É (–≤–∞–∂–Ω–æ: –¥–∞—ë–º —à–∞–Ω—Å JSON –ø–µ—Ä–≤–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö)
    try:
        cand = fuzzy_suggest(q, limit=1)
        if cand and cand[0][1] >= 0.72:
            return cand[0][0]
    except Exception:
        pass

    # 3) –∏–º–µ–Ω–∞ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π KB (–µ—Å–ª–∏ –µ—Å—Ç—å)
    cand = _kb_brand_names()
    if not cand:
        return None

    norm = _normalize_text(q).lower()

    # contains
    for name in cand:
        if name.lower() in norm or norm in name.lower():
            return name

    # fuzzy –ø–æ KB-–∏–º–µ–Ω–∞–º
    match = difflib.get_close_matches(norm, [c.lower() for c in cand], n=1, cutoff=0.72)
    if match:
        lower2real = {c.lower(): c for c in cand}
        return lower2real.get(match[0])
    return None

# =========================
# –•—ç–Ω–¥–ª–µ—Ä—ã –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–∑ AI
# =========================
@router.message(F.text == AI_ENTRY_BUTTON_TEXT)
@router.message(F.text == "/ai")
async def ai_mode(m: Message):
    AI_USERS.add(m.from_user.id)
    await m.answer(
        "AI-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –ù–∞–ø–∏—à–∏ –±—Ä–µ–Ω–¥ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.\n"
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: <b>–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ ‚Üí KB ‚Üí –≤–µ–±</b>.",
        parse_mode="HTML",
        reply_markup=ai_exit_inline_kb(),
    )

@router.message(F.text == AI_EXIT_BUTTON_TEXT)
@router.message(F.text == "/ai_off")
@router.callback_query(F.data == "ai_exit")
async def ai_mode_off(ev):
    user_id = ev.from_user.id if hasattr(ev, "from_user") else ev.message.from_user.id
    AI_USERS.discard(user_id)
    with suppress(Exception):
        if hasattr(ev, "message"):
            await ev.message.answer("AI-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.")
            await ev.answer()  # callback ack
        else:
            await ev.answer("AI-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.")

# =========================
# –ì–ª–∞–≤–Ω—ã–π AI-—Ö—ç–Ω–¥–ª–µ—Ä
# =========================
@router.message(lambda m: m.from_user.id in AI_USERS and m.text is not None)
async def handle_ai(m: Message):
    # –ê–Ω—Ç–∏—Å–ø–∞–º: –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –∫—É–ª–¥–∞—É–Ω
    lock = _user_lock(m.from_user.id)
    if lock.locked():
        await m.answer("–£–∂–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        return

    left = _cooldown_left(m.from_user.id)
    if left > 0.1:
        await m.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {left:.0f} —Å–µ–∫‚Ä¶")
        return

    async with lock:
        _mark_used(m.from_user.id)
        await _answer_ai(m, m.text.strip())

async def _answer_ai(m: Message, text: str):
    q = _normalize_text(text)
    if not q:
        await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞.")
        return

    # ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª
    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(_typing_pulse(m, stop_typing))

    t0 = time.monotonic()
    try:
        # Sales intent?
        intent = detect_sales_intent(q)
        if intent:
            await _answer_sales(m, q, intent, stop_typing, typing_task, t0)
            return

        # –ë—Ä–µ–Ω–¥/–∫–∞—Ä—Ç–æ—á–∫–∞
        await _answer_brand(m, q, stop_typing, typing_task, t0)

    finally:
        stop_typing.set()
        with suppress(Exception):
            await typing_task

async def _answer_brand(m: Message, q: str, stop_typing: asyncio.Event, typing_task: asyncio.Task, t0: float):
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) –õ–æ–∫–∞–ª—å–Ω–∞—è JSON-–∫–∞—Ä—Ç–æ—á–∫–∞ ‚Üí 2) KB-first ‚Üí 3) –í–µ–±
    """

    # 1) –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ —Ç–≤–æ–µ–π –±–∞–∑—ã (—Ç–æ—á–Ω—ã–π –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π fuzzy)
    name = exact_lookup(q)
    if not name:
        try:
            cand = fuzzy_suggest(q, limit=1)
            if cand and cand[0][1] >= 0.72:
                name = cand[0][0]
        except Exception:
            name = None

    if name:
        ai_inc("ai.query", tags={"intent": "brand"})
        item = get_brand(name)
        if item:
            caption = _sanitize_caption(item["caption"])
            photo_id = item.get("photo_file_id")

            try:
                if photo_id:
                    await m.answer_photo(
                        photo=photo_id,
                        caption=caption,
                        parse_mode="HTML",
                        reply_markup=ai_exit_inline_kb(),
                    )
                else:
                    await m.answer(caption, parse_mode="HTML", reply_markup=ai_exit_inline_kb())
            except TelegramBadRequest:
                ai_inc("ai.error", tags={"stage": "tg_parse"})
                with suppress(Exception):
                    await m.answer(caption, reply_markup=ai_exit_inline_kb())

            stop_typing.set()
            with suppress(Exception):
                await typing_task
            dt_ms = (time.monotonic() - t0) * 1000
            ai_inc("ai.source", tags={"source": "local"})
            ai_inc("ai.answer", tags={"intent": "brand", "source": "local"})
            ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "local"})
            log.info("[AI] local card in %.2fs", dt_ms / 1000.0)
            return

    # 2) KB-first
    brand_guess = _guess_brand(q)

    # 2a) —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å (brands_kb.json) -> –ø—Ä—è–º–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    if kb_find_record:
        try:
            rec = kb_find_record(q, brand_hint=brand_guess)
        except TypeError:
            # —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ brand_hint
            rec = kb_find_record(q) if kb_find_record else None

        if rec:
            caption = _sanitize_caption(build_caption_from_kb(rec))
            try:
                await m.answer(caption, parse_mode="HTML", reply_markup=ai_exit_inline_kb())
            except TelegramBadRequest:
                await m.answer(caption, reply_markup=ai_exit_inline_kb())

            stop_typing.set()
            with suppress(Exception):
                await typing_task
            dt_ms = (time.monotonic() - t0) * 1000
            ai_inc("ai.source", tags={"source": "kb"})
            ai_inc("ai.answer", tags={"intent": "brand", "source": "kb"})
            ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "kb"})
            log.info("[AI] kb direct card in %.2fs", dt_ms / 1000.0)
            return

    # 2b) RAG-—Ä–µ—Ç—Ä–∏–≤–µ—Ä -> Gemini –∫–∞—Ä—Ç–æ—á–∫–∞
    if kb_retrieve and generate_caption_with_gemini:
        try:
            kb = kb_retrieve(q, brand=brand_guess, top_k=8)
        except TypeError:
            kb = kb_retrieve(q)  # —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if kb and kb.get("results"):
            try:
                caption = await generate_caption_with_gemini(q, kb)
            except Exception:
                caption = ""
            caption = _sanitize_caption(caption) or "–ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –≤ KB."
            await m.answer(caption, parse_mode="HTML", reply_markup=ai_exit_inline_kb())

            stop_typing.set()
            with suppress(Exception):
                await typing_task
            dt_ms = (time.monotonic() - t0) * 1000
            ai_inc("ai.source", tags={"source": "kb"})
            ai_inc("ai.answer", tags={"intent": "brand", "source": "kb"})
            ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "kb"})
            log.info("[AI] kb gemini card in %.2fs", dt_ms / 1000.0)
            return

    # 3) WEB-–ø–æ–∏—Å–∫ (–∫—ç—à 30 –º–∏–Ω) -> Gemini / —Ñ–æ–ª–±—ç–∫
    cached = _cache_get(q)
    if cached:
        results = cached
    else:
        with suppress(Exception):
            ai_inc("ai.query", tags={"intent": "brand"})
        try:
            results = await web_search_brand(q)
        except Exception:
            results = {}
        if results:
            _cache_set(q, results)

    if generate_caption_with_gemini:
        try:
            caption = await generate_caption_with_gemini(q, results or {})
        except Exception:
            caption = ""
    else:
        caption = ""

    if not caption:
        # –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ–ª–±—ç–∫ –±–µ–∑ LLM
        items = (results or {}).get("results", [])
        lines = []
        if brand_guess:
            lines.append(f"<b>{brand_guess}</b>")
        for r in items[:5]:
            name = r.get("name") or r.get("title") or ""
            snip = r.get("snippet") or ""
            if name:
                lines.append(f"‚Ä¢ {name} ‚Äî {snip}")
        caption = "\n".join([l for l in lines if l]) or "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª."

    caption = _sanitize_caption(caption)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –±—Ä–µ–Ω–¥—É/–∑–∞–ø—Ä–æ—Å—É
    photo = None
    with suppress(Exception):
        photo = await image_search_brand((brand_guess or q) + " bottle label")

    try:
        if photo:
            await m.answer_photo(photo=photo, caption=caption, parse_mode="HTML", reply_markup=ai_exit_inline_kb())
        else:
            await m.answer(caption, parse_mode="HTML", reply_markup=ai_exit_inline_kb())
    except TelegramBadRequest:
        await m.answer(caption, reply_markup=ai_exit_inline_kb())

    stop_typing.set()
    with suppress(Exception):
        await typing_task
    dt_ms = (time.monotonic() - t0) * 1000
    ai_inc("ai.source", tags={"source": "web"})
    ai_inc("ai.answer", tags={"intent": "brand", "source": "web"})
    ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "web"})
    log.info("[AI] web card in %.2fs", dt_ms / 1000.0)

# =========================
# Sales-–∏–Ω—Ç–µ–Ω—Ç
# =========================
async def _answer_sales(m: Message, q: str, outlet: str, stop_typing: asyncio.Event, typing_task: asyncio.Task, t0: float):
    brand_guess = _guess_brand(q) or q
    text = ""
    if generate_sales_playbook_with_gemini:
        try:
            text = await generate_sales_playbook_with_gemini(q, outlet=outlet, brand=brand_guess)
        except Exception:
            text = ""
    if not text:
        text = (
            f"<b>–ö–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å: {brand_guess}</b>\n"
            f"‚Ä¢ –£—Ç–æ—á–Ω–∏ –≤–∫—É—Å: —Å–ª–∞–¥–æ—Å—Ç—å/—Å—É—Ö–æ—Å—Ç—å, –≤–∞–Ω–∏–ª—å/—Ñ—Ä—É–∫—Ç—ã/–¥—ã–º.\n"
            f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —Ö–∞–π–±–æ–ª–ª –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å.\n"
            f"‚Ä¢ –ü–∞—Ä–∞ —Å–ª–æ–≤ –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏ –≤—ã–¥–µ—Ä–∂–∫–µ ‚Äî –±–µ–∑ —Ü–µ–Ω –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏."
        )

    text = _sanitize_caption(text, limit=1000)
    try:
        await m.answer(text, parse_mode="HTML", reply_markup=ai_exit_inline_kb())
    except TelegramBadRequest:
        await m.answer(text, reply_markup=ai_exit_inline_kb())

    stop_typing.set()
    with suppress(Exception):
        await typing_task
    dt_ms = (time.monotonic() - t0) * 1000
    ai_inc("ai.source", tags={"source": "sales"})
    ai_inc("ai.answer", tags={"intent": "sales", "source": "sales"})
    ai_observe_ms("ai.latency", dt_ms, tags={"intent": "sales", "source": "sales"})
    log.info("[AI] sales in %.2fs", dt_ms / 1000.0)
