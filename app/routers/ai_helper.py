# app/routers/ai_helper.py ‚Äî OFFLINE ONLY (–±–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞)
from __future__ import annotations

import asyncio
import time
import logging
import re
import difflib
import json
from pathlib import Path
from contextlib import suppress
from typing import Optional, Tuple, List, Dict

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton

# ---- –º–µ—Ç—Ä–∏–∫–∏ / sales-–∏–Ω—Ç–µ–Ω—Ç—ã ----
from app.services.stats import ai_inc, ai_observe_ms
from app.services.sales_intents import detect_sales_intent, suggest_any_in_category

# ---- KB / RAG (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º; –∏–Ω–∞—á–µ fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π JSON) ----
try:
    from app.services.knowledge import find_record as kb_find_record, build_caption_from_kb
except Exception:
    kb_find_record = None
    def build_caption_from_kb(_): return ""

try:
    from app.services.knowledge import retrieve as kb_retrieve
except Exception:
    kb_retrieve = None

# ---- LLM (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –ø–æ–≤–µ—Ä—Ö –ª–æ–∫–∞–ª—å–Ω–æ–π KB, –Ω–µ –¥–ª—è –≤–µ–±–∞) ----
try:
    from app.services.ai_gemini import generate_caption_with_gemini, generate_sales_playbook_with_gemini
except Exception:
    generate_caption_with_gemini = None
    generate_sales_playbook_with_gemini = None

log = logging.getLogger(__name__)
router = Router()

# =========================
# –°–æ—Å—Ç–æ—è–Ω–∏–µ AI-—Ä–µ–∂–∏–º–∞ / –∞–Ω—Ç–∏—Å–ø–∞–º
# =========================
AI_USERS: set[int] = set()
_USER_LOCKS: dict[int, asyncio.Lock] = {}
_USER_LAST: dict[int, float] = {}
_COOLDOWN = 4.0  # —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def _user_lock(uid: int) -> asyncio.Lock:
    if uid not in _USER_LOCKS:
        _USER_LOCKS[uid] = asyncio.Lock()
    return _USER_LOCKS[uid]

def _cooldown_left(uid: int) -> float:
    last = _USER_LAST.get(uid, 0.0)
    left = _COOLDOWN - (time.time() - last)
    return max(0.0, left)

def _mark_used(uid: int):
    _USER_LAST[uid] = time.time()

# =========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç—ã
# =========================
try:
    from app.keyboards.menus import (
        AI_ENTRY_BUTTON_TEXT as MENU_AI_ENTRY,
        AI_EXIT_BUTTON_TEXT as MENU_AI_EXIT,
        ai_exit_inline_kb as menu_ai_exit_kb,
    )
except Exception:
    MENU_AI_ENTRY = "AI —ç–∫—Å–ø–µ—Ä—Ç ü§ñ"
    MENU_AI_EXIT  = "–í—ã–π—Ç–∏ –∏–∑ AI —Ä–µ–∂–∏–º–∞"
    def menu_ai_exit_kb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=MENU_AI_EXIT, callback_data="ai:exit")]]
        )

AI_ENTRY_TEXT = MENU_AI_ENTRY
AI_EXIT_TEXT  = MENU_AI_EXIT

# =========================
# –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ Telegram
# =========================
_ALLOWED_TAGS = {"b", "i", "u", "s", "a", "code", "pre", "br"}

def _sanitize_caption(html: str, limit: int = 1000) -> str:
    if not html:
        return ""
    html = re.sub(r"</?(?:h[1-6]|p|ul|ol|li|div|span)>", "", html, flags=re.I)
    html = re.sub(r"<\s*strong\s*>", "<b>", html, flags=re.I)
    html = re.sub(r"<\s*/\s*strong\s*>", "</b>", html, flags=re.I)
    html = re.sub(r"<\s*em\s*>", "<i>", html, flags=re.I)
    html = re.sub(r"<\s*/\s*em\s*>", "</i>", html, flags=re.I)

    def _strip_tag(m):
        tag = m.group(1).lower()
        return m.group(0) if tag in _ALLOWED_TAGS else ""
    html = re.sub(r"</?([a-z0-9]+)(?:\s+[^>]*)?>", _strip_tag, html)
    html = re.sub(r"\n{3,}", "\n\n", html).strip()
    if len(html) > limit:
        html = html[:limit-1].rstrip() + "‚Ä¶"
    return html

# =========================
# ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –∏–Ω–¥–∏–∫–∞—Ü–∏—è
# =========================
async def _typing_pulse(m: Message, stop_evt: asyncio.Event):
    try:
        while not stop_evt.is_set():
            with suppress(Exception):
                await m.bot.send_chat_action(m.chat.id, "typing")
            await asyncio.wait_for(stop_evt.wait(), timeout=4.0)
    except asyncio.TimeoutError:
        pass
    except Exception:
        pass

# =========================
# OFFLINE KB (fallback): –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON –∏ –ø–æ–∏—Å–∫
# =========================
_KB_CACHE: List[dict] = []
_KB_PATHS = [
    Path("data/ingested_kb.json"),         # –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–∂–µ—Å—Ç
    Path("data/kb/winespecialist.json"),   # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
]

def _load_kb_once(force: bool = False):
    global _KB_CACHE
    if _KB_CACHE and not force:
        return
    out: List[dict] = []
    for p in _KB_PATHS:
        if p.exists():
            try:
                data = json.loads(p.read_text(encoding="utf-8"))
                if isinstance(data, list):
                    out.extend(data)
            except Exception as e:
                log.warning("[KB] read fail %s: %s", p, e)
    _KB_CACHE = out
    log.info("[KB] loaded %d records", len(_KB_CACHE))

def _all_names(rec: dict) -> List[str]:
    names = set()
    for k in ("name", "brand", "title"):
        v = (rec.get(k) or "").strip()
        if v:
            names.add(v)
    for a in rec.get("aliases") or []:
        vv = (a or "").strip()
        if vv:
            names.add(vv)
    return list(names)

def _caption_from_rec(rec: dict, display_name: Optional[str] = None) -> str:
    name = display_name or rec.get("name") or rec.get("brand") or "–ë—Ä–µ–Ω–¥"
    basics = rec.get("basics") or {}
    category = rec.get("category") or basics.get("category")
    country  = rec.get("country")  or basics.get("country")
    abv      = rec.get("abv")      or basics.get("abv")
    notes    = rec.get("tasting_notes") or rec.get("taste") or []
    if isinstance(notes, str):
        notes = [notes]
    facts    = rec.get("facts") or []
    sources  = rec.get("sources") or []

    lines = [f"<b>{name}</b>"]
    meta_bits = [x for x in (category, country, abv) if x]
    if meta_bits:
        lines.append("‚Ä¢ " + " | ".join(meta_bits))
    if notes:
        joined = ", ".join([str(n) for n in notes])
        lines.append("‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å: " + joined[:300])
    for f in facts[:4]:
        lines.append("‚Ä¢ " + str(f))
    if sources:
        refs = " ".join([f"<a href='{u}'>[{i+1}]</a>" for i, u in enumerate(sources[:5])])
        lines.append("–ò—Å—Ç–æ—á–Ω–∏–∫–∏: " + refs)
    return "\n".join(lines)

def _photo_from_rec(rec: dict) -> Optional[str]:
    img = rec.get("image_url")
    if isinstance(img, list):
        return next((u for u in img if isinstance(u, str) and u.strip()), None)
    if isinstance(img, str):
        return img.strip() or None
    basics = rec.get("basics") or {}
    img2 = basics.get("image_url")
    return (img2 or None) if isinstance(img2, str) else None

# ------- –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ KB (–¥–∏–∑–∞–º–±–∏–≥—É–∞—Ü–∏—è) -------
def _score(query: str, candidate: str) -> float:
    q = (query or "").lower()
    c = (candidate or "").lower()
    if not q or not c:
        return 0.0
    if q == c:               # –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        return 1.0
    if q in c or c in q:     # –ø–æ–¥—Å—Ç—Ä–æ–∫–∞
        return 0.95
    return difflib.SequenceMatcher(a=q, b=c).ratio()

def _search_kb_candidates(query: str, k: int = 8) -> List[Tuple[float, dict, str]]:
    _load_kb_once()
    scored: List[Tuple[float, dict, str]] = []
    q = (query or "").strip()
    if not q:
        return scored

    for rec in _KB_CACHE:
        names = _all_names(rec)
        if not names:
            continue
        s = max(_score(q, n) for n in names)
        if s >= 0.60:
            # –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π –∞–ª–∏–∞—Å –∫–∞–∫ display
            display = names[0]
            scored.append((s, rec, display))

    scored.sort(key=lambda x: x[0], reverse=True)
    return scored[:k]

# –∫—ç—à –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
_USER_CANDIDATES: Dict[int, List[Tuple[float, dict, str]]] = {}

# =========================
# –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–∑ AI-—Ä–µ–∂–∏–º–∞
# =========================
@router.message(F.text == AI_ENTRY_TEXT)
@router.message(F.text == "/ai")
async def ai_mode_msg(m: Message):
    AI_USERS.add(m.from_user.id)
    _load_kb_once()  # ¬´–ª–µ–Ω–∏–≤—ã–π¬ª –ø—Ä–æ–≥—Ä–µ–≤
    kb_size = len(_KB_CACHE)
    await m.answer(
        f"AI-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω.\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: <b>—Ç–æ–ª—å–∫–æ –æ—Ñ—Ñ–ª–∞–π–Ω-–ë–ó</b> (ingested_kb.json –∏ –ø–∞–∫–µ—Ç—ã –≤ data/kb/).\n"
        f"–ó–∞–ø–∏—Å–µ–π –≤ KB: <b>{kb_size}</b>.\n\n"
        f"–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞/–Ω–∞–ø–∏—Ç–∫–∞ –∏–ª–∏ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º.",
        parse_mode="HTML",
        reply_markup=menu_ai_exit_kb(),
    )

@router.callback_query(F.data == "ai:enter")
async def ai_mode_cb(cb: CallbackQuery):
    AI_USERS.add(cb.from_user.id)
    _load_kb_once()
    with suppress(Exception):
        await cb.answer()
    await cb.message.answer(
        "AI-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –†–∞–±–æ—Ç–∞–µ–º <b>—Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ñ—Ñ–ª–∞–π–Ω-–ë–ó</b>.",
        parse_mode="HTML",
        reply_markup=menu_ai_exit_kb(),
    )

@router.message(F.text == AI_EXIT_TEXT)
@router.message(F.text == "/ai_off")
@router.callback_query(F.data.in_({"ai:exit", "ai_exit"}))
async def ai_mode_off(ev):
    user_id = ev.from_user.id if hasattr(ev, "from_user") else ev.message.from_user.id
    AI_USERS.discard(user_id)
    _USER_CANDIDATES.pop(user_id, None)
    if isinstance(ev, CallbackQuery):
        with suppress(Exception):
            await ev.answer()
        with suppress(Exception):
            await ev.message.answer("AI-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        await ev.answer("AI-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.")

# –î–æ–ø. –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ KB
@router.message(F.text == "/ai_status")
async def ai_status(m: Message):
    on = m.from_user.id in AI_USERS
    _load_kb_once()
    await m.answer(
        f"AI-—Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á—ë–Ω' if on else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
        f"KB –∑–∞–ø–∏—Å–µ–π: {len(_KB_CACHE)}",
        reply_markup=menu_ai_exit_kb() if on else None
    )

@router.message(F.text == "/ai_reload_kb")
async def ai_reload(m: Message):
    _load_kb_once(force=True)
    await m.answer(f"KB –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(_KB_CACHE)}", reply_markup=menu_ai_exit_kb())

# =========================
# –ì–ª–∞–≤–Ω—ã–π AI-—Ö–µ–Ω–¥–ª–µ—Ä (OFFLINE ONLY)
# =========================
@router.message(lambda m: m.from_user.id in AI_USERS and m.text is not None)
async def handle_ai(m: Message):
    lock = _user_lock(m.from_user.id)
    if lock.locked():
        await m.answer("–£–∂–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        return
    left = _cooldown_left(m.from_user.id)
    if left > 0.1:
        await m.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {left:.0f} —Å–µ–∫‚Ä¶")
        return
    async with lock:
        _mark_used(m.from_user.id)
        await _answer_ai(m, m.text.strip())

async def _answer_ai(m: Message, text: str):
    q = (text or "").strip()
    if not q:
        await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞.")
        return

    # ====== –†–ê–ù–ù–ò–ï –ò–ù–¢–ï–ù–¢–´ (sales) ======
    is_sales, outlet, brand_for_sales = detect_sales_intent(q)
    if is_sales:
        html = ""
        if generate_sales_playbook_with_gemini:
            with suppress(Exception):
                html = await generate_sales_playbook_with_gemini(q, outlet, brand_for_sales)
        if not html:
            brand_hint = brand_for_sales or q
            html = (
                f"<b>–ö–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å: {brand_hint}</b>\n"
                f"‚Ä¢ –£—Ç–æ—á–Ω–∏ –≤–∫—É—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—Å–ª–∞–¥–æ—Å—Ç—å/—Å—É—Ö–æ—Å—Ç—å; –≤–∞–Ω–∏–ª—å/—Ñ—Ä—É–∫—Ç—ã/–¥—ã–º).\n"
                f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —Ö–∞–π–±–æ–ª–ª –∏–ª–∏ –∫–ª–∞—Å—Å–∏–∫—É (Old Fashioned / Sour), –±–µ–∑ —Ü–µ–Ω.\n"
                f"‚Ä¢ 1 —Ñ—Ä–∞–∑–∞ –ø—Ä–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ/–±–æ—á–∫–∏ –∫–∞–∫ ¬´–∏—Å—Ç–æ—Ä–∏—é –±—Ä–µ–Ω–¥–∞¬ª.\n"
                f"‚Ä¢ –ê–ø—Å–µ–ª–ª: –ø—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è; –∫—Ä–æ—Å—Å-—Å–µ–ª–ª: –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞–∫—É—Å–∫–∞."
            )
        await m.answer(_sanitize_caption(html), parse_mode="HTML", reply_markup=menu_ai_exit_kb())
        return

    any_res = suggest_any_in_category(q)
    if any_res:
        display_cat, names = any_res
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –±—Ä–µ–Ω–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        try:
            kb = ReplyKeyboardBuilder()
            for n in names[:10]:
                kb.add(KeyboardButton(text=n))
            kb.add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
            kb.adjust(2)
            await m.answer(f"–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–µ–Ω–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{display_cat}¬ª:", reply_markup=kb.as_markup(resize_keyboard=True))
        except Exception:
            pass

    # ====== –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–ö–ë ======
    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(_typing_pulse(m, stop_typing))
    t0 = time.monotonic()
    try:
        ai_inc("ai.query", tags={"intent": "brand"})

        # 1) –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–º KB, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        rec = None
        disp_name = None
        if kb_find_record:
            with suppress(Exception):
                tmp = kb_find_record(q)
                if tmp:
                    rec = tmp
                    disp_name = (tmp.get("name") or tmp.get("brand"))

        # 2) –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π KB (–¥–∏–∑–∞–º–±–∏–≥—É–∞—Ü–∏—è)
        if rec is None:
            candidates = _search_kb_candidates(q, k=8)
            if not candidates:
                # –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤–æ–æ–±—â–µ
                await _reply_kb_miss(m, t0, typing_task, stop_typing)
                return

            # –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç (score ~ 1.0) ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            top_score, top_rec, top_disp = candidates[0]
            if top_score >= 0.95:
                await _reply_card(m, top_rec, top_disp, t0, typing_task, stop_typing)
                return

            # –∏–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤—ã–±–æ—Ä
            _USER_CANDIDATES[m.from_user.id] = candidates
            kb = [
                [InlineKeyboardButton(text=f"{i+1}. {d[:64]}", callback_data=f"ai:pick:{i}")]
                for i, (_, _, d) in enumerate(candidates)
            ]
            await m.answer(
                "–ù–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —É—Ç–æ—á–Ω–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
            stop_typing.set()
            with suppress(Exception):
                await typing_task
            return

        # 3) –ï—Å—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ kb_find_record ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        await _reply_card(m, rec, disp_name, t0, typing_task, stop_typing)
        return

    finally:
        stop_typing.set()
        with suppress(Exception):
            await typing_task

async def _reply_card(m: Message, rec: dict, disp_name: Optional[str],
                      t0: float, typing_task: asyncio.Task, stop_typing: asyncio.Event):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π caption –∏–∑ KB-–º–æ–¥—É–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if build_caption_from_kb != (lambda _: ""):
        with suppress(Exception):
            caption = _sanitize_caption(build_caption_from_kb(rec))
    else:
        caption = ""
    if not caption:
        caption = _sanitize_caption(_caption_from_rec(rec, disp_name))

    photo = _photo_from_rec(rec)
    try:
        if photo:
            await m.answer_photo(photo=photo, caption=caption, parse_mode="HTML", reply_markup=menu_ai_exit_kb())
        else:
            await m.answer(caption, parse_mode="HTML", reply_markup=menu_ai_exit_kb())
    except TelegramBadRequest:
        await m.answer(caption, reply_markup=menu_ai_exit_kb())

    stop_typing.set()
    with suppress(Exception):
        await typing_task
    dt_ms = (time.monotonic() - t0) * 1000
    ai_inc("ai.source", tags={"source": "kb_offline"})
    ai_inc("ai.answer", tags={"intent": "brand", "source": "kb_offline"})
    ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "kb_offline"})
    log.info("[AI] offline KB card in %.2fs", dt_ms / 1000.0)

async def _reply_kb_miss(m: Message, t0: float, typing_task: asyncio.Task, stop_typing: asyncio.Event):
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ç—Ä–∏–≤–µ—Ä + Gemini ‚Äî –¥–∞–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç ¬´—Ç–æ–ª—å–∫–æ –∏–∑ KB-–¥–æ–∫–æ–≤¬ª, –∏–Ω–∞—á–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–Ω–∂–µ—Å—Ç—É
    if kb_retrieve and generate_caption_with_gemini:
        try:
            kb = kb_retrieve(m.text, top_k=8)
        except TypeError:
            kb = kb_retrieve(m.text)
        if kb and kb.get("results"):
            with suppress(Exception):
                caption = await generate_caption_with_gemini(
                    m.text, kb,
                    system_prompt=(
                        "–¢—ã –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞–µ—à—å –Ω–∞–ø–∏—Ç–æ–∫ —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–ó "
                        "(—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã retrieval). –ù–∏–∫–∞–∫–∏—Ö –¥–æ–≥–∞–¥–æ–∫. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî –ø–∏—à–∏ '–Ω/–¥'. "
                        "–î–∞–π 2‚Äì3 –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ 3‚Äì6 –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ—Ç —Å–ø–∏—Å–∫–æ–º."
                    )
                )
            caption = _sanitize_caption(caption) or "–ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–ë–ó."
            await m.answer(caption, parse_mode="HTML", reply_markup=menu_ai_exit_kb())
        else:
            await _reply_ingest_help(m)
    else:
        await _reply_ingest_help(m)

    stop_typing.set()
    with suppress(Exception):
        await typing_task
    dt_ms = (time.monotonic() - t0) * 1000
    ai_inc("ai.source", tags={"source": "kb_offline_miss"})
    ai_inc("ai.answer", tags={"intent": "brand", "source": "kb_offline_miss"})
    ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "kb_offline_miss"})
    log.info("[AI] offline KB miss in %.2fs", dt_ms / 1000.0)

async def _reply_ingest_help(m: Message):
    help_text = (
        "<b>–ù–µ –Ω–∞—à—ë–ª –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–±–∞–∑–µ.</b>\n"
        "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±—Ä–µ–Ω–¥ –±–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞:\n"
        "1) –û—Ç–∫—Ä–æ–π data/seed_urls.json –∏ –¥–æ–±–∞–≤—å —Ç–æ—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ \"exact_pages\".\n"
        "2) –ó–∞–ø—É—Å—Ç–∏ GitHub ‚Üí Actions ‚Üí <i>Ingest allowed sites</i> c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º <b>run_all: true</b>.\n"
        "3) –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ data/ingested_kb.json –æ–±–Ω–æ–≤–∏–ª—Å—è ‚Äî –∏ —Å–ø—Ä–æ—Å–∏ –±—Ä–µ–Ω–¥ –µ—â—ë —Ä–∞–∑."
    )
    await m.answer(help_text, parse_mode="HTML", reply_markup=menu_ai_exit_kb())

# =========================
# –ö–æ–ª–ª–±–µ–∫–∏: –≤—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
# =========================
@router.callback_query(F.data.regexp(r"^ai:pick:(\d+)$"))
async def ai_pick_candidate(cb: CallbackQuery):
    uid = cb.from_user.id
    m = cb.message
    with suppress(Exception):
        await cb.answer()

    candidates = _USER_CANDIDATES.get(uid) or []
    try:
        idx = int(cb.data.split(":")[-1])
    except Exception:
        idx = -1
    if idx < 0 or idx >= len(candidates):
        with suppress(Exception):
            await m.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑.")
        _USER_CANDIDATES.pop(uid, None)
        return

    _, rec, disp = candidates[idx]
    _USER_CANDIDATES.pop(uid, None)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    t0 = time.monotonic()
    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(_typing_pulse(m, stop_typing))
    try:
        await _reply_card(m, rec, disp, t0, typing_task, stop_typing)
    finally:
        stop_typing.set()
        with suppress(Exception):
            await typing_task
