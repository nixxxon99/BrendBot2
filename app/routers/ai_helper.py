# app/routers/ai_helper.py ‚Äî OFFLINE ONLY (–±–µ–∑ –≤–µ–±–∞ –∏ –±–µ–∑ local JSON)
from __future__ import annotations

import asyncio
import time
import logging
import re
import difflib
import json
from pathlib import Path
from contextlib import suppress
from typing import Optional, Tuple

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton

# ---- –º–µ—Ç—Ä–∏–∫–∏ / sales-–∏–Ω—Ç–µ–Ω—Ç—ã (–æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ) ----
from app.services.stats import ai_inc, ai_observe_ms
from app.services.sales_intents import detect_sales_intent, suggest_any_in_category

# ---- KB / RAG (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; –µ—Å–ª–∏ –º–æ–¥—É–ª—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫) ----
try:
    from app.services.knowledge import find_record as kb_find_record, build_caption_from_kb
except Exception:
    kb_find_record = None
    def build_caption_from_kb(_): return ""

try:
    from app.services.knowledge import retrieve as kb_retrieve
except Exception:
    kb_retrieve = None

# ---- LLM (–ø–æ –∂–µ–ª–∞–Ω–∏—é; –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ–≤–µ—Ä—Ö KB, –∞ –Ω–µ –≤–µ–±–∞) ----
try:
    from app.services.ai_gemini import generate_caption_with_gemini, generate_sales_playbook_with_gemini
except Exception:
    generate_caption_with_gemini = None
    generate_sales_playbook_with_gemini = None

log = logging.getLogger(__name__)
router = Router()

# =========================
# –°–æ—Å—Ç–æ—è–Ω–∏–µ AI-—Ä–µ–∂–∏–º–∞ / –∞–Ω—Ç–∏—Å–ø–∞–º
# =========================
AI_USERS: set[int] = set()
_USER_LOCKS: dict[int, asyncio.Lock] = {}
_USER_LAST: dict[int, float] = {}
_COOLDOWN = 4.0  # —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def _user_lock(uid: int) -> asyncio.Lock:
    if uid not in _USER_LOCKS:
        _USER_LOCKS[uid] = asyncio.Lock()
    return _USER_LOCKS[uid]

def _cooldown_left(uid: int) -> float:
    last = _USER_LAST.get(uid, 0.0)
    left = _COOLDOWN - (time.time() - last)
    return max(0.0, left)

def _mark_used(uid: int):
    _USER_LAST[uid] = time.time()

# =========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç—ã
# =========================
try:
    from app.keyboards.menus import (
        AI_ENTRY_BUTTON_TEXT as MENU_AI_ENTRY,
        AI_EXIT_BUTTON_TEXT as MENU_AI_EXIT,
        ai_exit_inline_kb as menu_ai_exit_kb,
    )
except Exception:
    MENU_AI_ENTRY = "AI —ç–∫—Å–ø–µ—Ä—Ç ü§ñ"
    MENU_AI_EXIT  = "–í—ã–π—Ç–∏ –∏–∑ AI —Ä–µ–∂–∏–º–∞"
    def menu_ai_exit_kb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=MENU_AI_EXIT, callback_data="ai:exit")]]
        )

AI_ENTRY_TEXT = MENU_AI_ENTRY
AI_EXIT_TEXT  = MENU_AI_EXIT

# =========================
# –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ Telegram
# =========================
_ALLOWED_TAGS = {"b", "i", "u", "s", "a", "code", "pre", "br"}

def _sanitize_caption(html: str, limit: int = 1000) -> str:
    if not html:
        return ""
    html = re.sub(r"</?(?:h[1-6]|p|ul|ol|li)>", "", html, flags=re.I)
    html = re.sub(r"<\s*strong\s*>", "<b>", html, flags=re.I)
    html = re.sub(r"<\s*/\s*strong\s*>", "</b>", html, flags=re.I)
    html = re.sub(r"<\s*em\s*>", "<i>", html, flags=re.I)
    html = re.sub(r"<\s*/\s*em\s*>", "</i>", html, flags=re.I)
    def _strip_tag(m):
        tag = m.group(1).lower()
        return m.group(0) if tag in _ALLOWED_TAGS else ""
    html = re.sub(r"</?([a-z0-9]+)(?:\s+[^>]*)?>", _strip_tag, html)
    html = re.sub(r"\n{3,}", "\n\n", html).strip()
    if len(html) > limit:
        html = html[:limit-1].rstrip() + "‚Ä¶"
    return html

# =========================
# ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –∏–Ω–¥–∏–∫–∞—Ü–∏—è
# =========================
async def _typing_pulse(m: Message, stop_evt: asyncio.Event):
    try:
        while not stop_evt.is_set():
            with suppress(Exception):
                await m.bot.send_chat_action(m.chat.id, "typing")
            await asyncio.wait_for(stop_evt.wait(), timeout=4.0)
    except asyncio.TimeoutError:
        pass
    except Exception:
        pass

# =========================
# OFFLINE KB: –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ ingested_kb.json –∏ –ø–æ–∏—Å–∫ –ø–æ –∞–ª–∏–∞—Å–∞–º
# =========================
_KB_CACHE: list[dict] = []
_KB_PATHS = [
    Path("data/ingested_kb.json"),
    Path("data/kb/winespecialist.json"),  # –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è site-packs
]

def _load_kb_once():
    global _KB_CACHE
    if _KB_CACHE:
        return
    out = []
    for p in _KB_PATHS:
        if p.exists():
            try:
                data = json.loads(p.read_text(encoding="utf-8"))
                if isinstance(data, list):
                    out.extend(data)
            except Exception as e:
                log.warning("[KB] read fail %s: %s", p, e)
    _KB_CACHE = out

def _all_names(rec: dict) -> list[str]:
    names = set()
    for k in ("name", "brand", "title"):
        v = (rec.get(k) or "").strip()
        if v:
            names.add(v)
    for a in rec.get("aliases") or []:
        vv = (a or "").strip()
        if vv:
            names.add(vv)
    return list(names)

def _kb_find_local(query: str) -> Tuple[Optional[dict], Optional[str]]:
    """–∏—â–µ–º –ª—É—á—à—É—é –∑–∞–ø–∏—Å—å –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–ª–∏ –±–ª–∏–∂–∞–π—à–µ–º—É –∞–ª–∏–∞—Å—É"""
    _load_kb_once()
    q = (query or "").strip().lower()
    if not q:
        return None, None
    best = None
    best_name = None
    best_score = 0.0

    for rec in _KB_CACHE:
        names = _all_names(rec)
        # —Ç–æ—á–Ω–æ–µ/–≤—Ö–æ–∂–¥–µ–Ω–∏–µ
        for n in names:
            nlow = n.lower()
            if nlow == q or q in nlow or nlow in q:
                return rec, n  # –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        # –±–ª–∏–∑–æ—Å—Ç—å
        ratio = max([difflib.SequenceMatcher(a=q, b=n.lower()).ratio() for n in names] + [0.0])
        if ratio > best_score:
            best_score = ratio
            best = rec
            best_name = names[0] if names else None

    if best and best_score >= 0.72:
        return best, best_name
    return None, None

def _caption_from_rec(rec: dict, display_name: Optional[str] = None) -> str:
    name = display_name or rec.get("name") or rec.get("brand") or "–ë—Ä–µ–Ω–¥"
    category = rec.get("category")
    country  = rec.get("country")
    abv      = rec.get("abv")
    notes    = rec.get("tasting_notes") or []
    facts    = rec.get("facts") or []
    sources  = rec.get("sources") or []

    lines = [f"<b>{name}</b>"]
    meta_bits = [category, country, abv]
    meta = " | ".join([x for x in meta_bits if x])
    if meta:
        lines.append("‚Ä¢ " + meta)
    if notes:
        lines.append("‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å: " + ", ".join([str(n) for n in notes])[:300])
    for f in facts[:4]:
        lines.append("‚Ä¢ " + str(f))
    if sources:
        refs = " ".join([f"<a href='{u}'>[{i+1}]</a>" for i, u in enumerate(sources[:5])])
        lines.append("–ò—Å—Ç–æ—á–Ω–∏–∫–∏: " + refs)
    return "\n".join(lines)

def _photo_from_rec(rec: dict) -> Optional[str]:
    img = rec.get("image_url")
    if isinstance(img, list):
        return next((u for u in img if isinstance(u, str) and u.strip()), None)
    if isinstance(img, str):
        return img
    return None

# =========================
# –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–∑ AI-—Ä–µ–∂–∏–º–∞
# =========================
@router.message(F.text == AI_ENTRY_TEXT)
@router.message(F.text == "/ai")
async def ai_mode_msg(m: Message):
    AI_USERS.add(m.from_user.id)
    await m.answer(
        "AI-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –†–∞–±–æ—Ç–∞–µ–º <b>—Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ñ—Ñ–ª–∞–π–Ω-–±–∞–∑—ã</b> (ingested_kb.json). "
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –ø–æ–ø–æ–ª–Ω–∏ seed_urls.json –∏ –∑–∞–ø—É—Å—Ç–∏ GitHub Actions ‚Üí Ingest.",
        parse_mode="HTML",
        reply_markup=menu_ai_exit_kb(),
    )

@router.callback_query(F.data == "ai:enter")
async def ai_mode_cb(cb: CallbackQuery):
    AI_USERS.add(cb.from_user.id)
    with suppress(Exception):
        await cb.answer()
    await cb.message.answer(
        "AI-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –†–∞–±–æ—Ç–∞–µ–º <b>—Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ñ—Ñ–ª–∞–π–Ω-–±–∞–∑—ã</b> (ingested_kb.json).",
        parse_mode="HTML",
        reply_markup=menu_ai_exit_kb(),
    )

@router.message(F.text == AI_EXIT_TEXT)
@router.message(F.text == "/ai_off")
@router.callback_query(F.data.in_({"ai:exit", "ai_exit"}))
async def ai_mode_off(ev):
    user_id = ev.from_user.id if hasattr(ev, "from_user") else ev.message.from_user.id
    AI_USERS.discard(user_id)
    if isinstance(ev, CallbackQuery):
        with suppress(Exception):
            await ev.answer()
        with suppress(Exception):
            await ev.message.answer("AI-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        await ev.answer("AI-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.")

# =========================
# –ì–ª–∞–≤–Ω—ã–π AI-—Ö–µ–Ω–¥–ª–µ—Ä (OFFLINE ONLY)
# =========================
@router.message(lambda m: m.from_user.id in AI_USERS and m.text is not None)
async def handle_ai(m: Message):
    lock = _user_lock(m.from_user.id)
    if lock.locked():
        await m.answer("–£–∂–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        return
    left = _cooldown_left(m.from_user.id)
    if left > 0.1:
        await m.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {left:.0f} —Å–µ–∫‚Ä¶")
        return
    async with lock:
        _mark_used(m.from_user.id)
        await _answer_ai(m, m.text.strip())

async def _answer_ai(m: Message, text: str):
    q = (text or "").strip()
    if not q:
        await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞.")
        return

    # ====== –†–ê–ù–ù–ò–ï –ò–ù–¢–ï–ù–¢–´ (–æ—Å—Ç–∞–≤–ª—è–µ–º) ======
    is_sales, outlet, brand_for_sales = detect_sales_intent(q)
    if is_sales:
        html = ""
        if generate_sales_playbook_with_gemini:
            with suppress(Exception):
                html = await generate_sales_playbook_with_gemini(q, outlet, brand_for_sales)
        if not html:
            brand_hint = brand_for_sales or q
            html = (
                f"<b>–ö–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å: {brand_hint}</b>\n"
                f"‚Ä¢ –£—Ç–æ—á–Ω–∏ –≤–∫—É—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—Å–ª–∞–¥–æ—Å—Ç—å/—Å—É—Ö–æ—Å—Ç—å; –≤–∞–Ω–∏–ª—å/—Ñ—Ä—É–∫—Ç—ã/–¥—ã–º).\n"
                f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ —Ö–∞–π–±–æ–ª–ª –∏–ª–∏ –∫–ª–∞—Å—Å–∏–∫—É (Old Fashioned / Sour), –±–µ–∑ —Ü–µ–Ω.\n"
                f"‚Ä¢ 1 —Ñ—Ä–∞–∑–∞ –ø—Ä–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ/–±–æ—á–∫–∏ –∫–∞–∫ ¬´–∏—Å—Ç–æ—Ä–∏—é –±—Ä–µ–Ω–¥–∞¬ª.\n"
                f"‚Ä¢ –ê–ø—Å–µ–ª–ª: –ø—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è; –∫—Ä–æ—Å—Å-—Å–µ–ª–ª: –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞–∫—É—Å–∫–∞."
            )
        await m.answer(_sanitize_caption(html), parse_mode="HTML", reply_markup=menu_ai_exit_kb())
        return

    any_res = suggest_any_in_category(q)
    if any_res:
        display_cat, names = any_res
        first = names[0]
        # –¥–∞–∂–µ —Ç—É—Ç ‚Äî –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ KB
        rec, disp = _kb_find_local(first)
        caption = _sanitize_caption(_caption_from_rec(rec, disp)) if rec else f"<b>{first}</b>\n‚Ä¢ –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–ë–ó."
        photo = _photo_from_rec(rec) if rec else None

        if photo:
            await m.answer_photo(photo=photo, caption=caption, parse_mode="HTML", reply_markup=menu_ai_exit_kb())
        else:
            await m.answer(caption, parse_mode="HTML", reply_markup=menu_ai_exit_kb())

        try:
            kb = ReplyKeyboardBuilder()
            for n in names[:10]:
                kb.add(KeyboardButton(text=n))
            kb.add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
            kb.adjust(2)
            await m.answer(f"–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–µ–Ω–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{display_cat}¬ª:",
                           reply_markup=kb.as_markup(resize_keyboard=True))
        except Exception:
            pass
        return
    # ====== –ö–û–ù–ï–¶ –†–ê–ù–ù–ò–• –ò–ù–¢–ï–ù–¢–û–í ======

    # –∏–Ω–¥–∏–∫–∞—Ü–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶"
    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(_typing_pulse(m, stop_typing))
    t0 = time.monotonic()

    try:
        ai_inc("ai.query", tags={"intent": "brand"})

        # 1) –ò—â–µ–º –ø—Ä—è–º–æ –∑–∞–ø–∏—Å—å –≤ KB –º–æ–¥—É–ª–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        rec = None
        disp_name = None
        if kb_find_record:
            try:
                tmp = kb_find_record(q)
                if tmp:
                    rec = tmp
                    disp_name = (tmp.get("name") or tmp.get("brand"))
            except Exception:
                rec = None

        # 2) –ù–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ingested_kb.json
        if rec is None:
            rec, disp_name = _kb_find_local(q)

        # 3) –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –±–µ–∑ –≤–µ–±–∞
        if rec:
            # —Å–Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Å–∏–≤—ã–π caption –∏–∑ KB-–º–æ–¥—É–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if build_caption_from_kb != (lambda _: ""):
                with suppress(Exception):
                    caption = _sanitize_caption(build_caption_from_kb(rec))
                if not caption:
                    caption = _sanitize_caption(_caption_from_rec(rec, disp_name))
            else:
                caption = _sanitize_caption(_caption_from_rec(rec, disp_name))

            photo = _photo_from_rec(rec)

            try:
                if photo:
                    await m.answer_photo(photo=photo, caption=caption, parse_mode="HTML", reply_markup=menu_ai_exit_kb())
                else:
                    await m.answer(caption, parse_mode="HTML", reply_markup=menu_ai_exit_kb())
            except TelegramBadRequest:
                await m.answer(caption, reply_markup=menu_ai_exit_kb())

            stop_typing.set()
            with suppress(Exception):
                await typing_task
            dt_ms = (time.monotonic() - t0) * 1000
            ai_inc("ai.source", tags={"source": "kb_offline"})
            ai_inc("ai.answer", tags={"intent": "brand", "source": "kb_offline"})
            ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "kb_offline"})
            log.info("[AI] offline KB card in %.2fs", dt_ms / 1000.0)
            return

        # 4) KB ‚Üí LLM (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ¬´–æ–∂–∏–≤–∏—Ç—å¬ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, –Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ KB)
        if kb_retrieve and generate_caption_with_gemini:
            try:
                kb = kb_retrieve(q, top_k=8)
            except TypeError:
                kb = kb_retrieve(q)
            if kb and kb.get("results"):
                try:
                    caption = await generate_caption_with_gemini(
                        q, kb,
                        system_prompt=(
                            "–¢—ã –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞–µ—à—å –Ω–∞–ø–∏—Ç–æ–∫ —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–ó "
                            "(—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã retrieval). –ù–∏–∫–∞–∫–∏—Ö –¥–æ–≥–∞–¥–æ–∫. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî –ø–∏—à–∏ '–Ω/–¥'. "
                            "–î–∞–π 2‚Äì3 –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ 3‚Äì6 –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ—Ç —Å–ø–∏—Å–∫–æ–º."
                        )
                    )
                except Exception:
                    caption = ""
                caption = _sanitize_caption(caption) or "–ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–ë–ó."
                await m.answer(caption, parse_mode="HTML", reply_markup=menu_ai_exit_kb())

                stop_typing.set()
                with suppress(Exception):
                    await typing_task
                dt_ms = (time.monotonic() - t0) * 1000
                ai_inc("ai.source", tags={"source": "kb_offline"})
                ai_inc("ai.answer", tags={"intent": "brand", "source": "kb_offline"})
                ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "kb_offline"})
                log.info("[AI] offline KB + Gemini in %.2fs", dt_ms / 1000.0)
                return

        # 5) –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–ë–ó ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ ¬´–Ω–∞–∫–æ—Ä–º–∏—Ç—å¬ª
        help_text = (
            "<b>–ù–µ –Ω–∞—à—ë–ª –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-–±–∞–∑–µ.</b>\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±—Ä–µ–Ω–¥ –±–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞:\n"
            "1) –û—Ç–∫—Ä–æ–π data/seed_urls.json –∏ –¥–æ–±–∞–≤—å —Ç–æ—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ \"exact_pages\".\n"
            "2) –ó–∞–ø—É—Å—Ç–∏ GitHub ‚Üí Actions ‚Üí <i>Ingest allowed sites</i> —Å <b>run_all: true</b>.\n"
            "3) –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ data/ingested_kb.json –æ–±–Ω–æ–≤–∏–ª—Å—è ‚Äî –∏ —Å–ø—Ä–æ—Å–∏ –±—Ä–µ–Ω–¥ –µ—â—ë —Ä–∞–∑."
        )
        await m.answer(help_text, parse_mode="HTML", reply_markup=menu_ai_exit_kb())

        stop_typing.set()
        with suppress(Exception):
            await typing_task
        dt_ms = (time.monotonic() - t0) * 1000
        ai_inc("ai.source", tags={"source": "kb_offline_miss"})
        ai_inc("ai.answer", tags={"intent": "brand", "source": "kb_offline_miss"})
        ai_observe_ms("ai.latency", dt_ms, tags={"intent": "brand", "source": "kb_offline_miss"})
        log.info("[AI] offline KB miss in %.2fs", dt_ms / 1000.0)

    finally:
        stop_typing.set()
        with suppress(Exception):
            await typing_task
