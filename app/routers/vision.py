from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from app.services.vision import recognize_brands_from_bytes
from app.services.brands import _kb_find
from app.services.portfolio import in_portfolio, suggest_alternatives
router = Router()
@router.message(F.text == "üì∏ –§–æ—Ç–æ-–∞–Ω–∞–ª–∏–∑")
async def info(m: Message):
    await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±—É—Ç—ã–ª–∫–∏/–ø–æ–ª–∫–∏ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é –Ω–∞–¥–ø–∏—Å–∏ –∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à –±—Ä–µ–Ω–¥, –ø—Ä–µ–¥–ª–æ–∂—É –Ω–∞—à–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.")
@router.message(F.photo)
async def handle_photo(m: Message):
    p = m.photo[-1]
    file = await m.bot.get_file(p.file_id)
    file_bytes = await m.bot.download_file(file.file_path)
    data = file_bytes.read()
    cands = recognize_brands_from_bytes(data)
    if not cands:
        await m.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–π —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä —ç—Ç–∏–∫–µ—Ç–∫–∏.")
        return
    for cand in cands[:10]:
        rec, disp = _kb_find(cand)
        if rec:
            await m.answer(f"–ü–æ—Ö–æ–∂–µ –Ω–∞: <b>{disp}</b>", parse_mode="HTML")
            if not in_portfolio(disp):
                alts = suggest_alternatives(disp, maxn=5)
                if alts:
                    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=a, callback_data=f"show:{a}")] for a in alts[:5]])
                    await m.answer("–≠—Ç–æ –Ω–µ –Ω–∞—à –±—Ä–µ–Ω–¥. –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:", reply_markup=kb)
            return
    top = cands[0]
    if not in_portfolio(top):
        alts = suggest_alternatives(top, maxn=5)
        if alts:
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=a, callback_data=f"show:{a}")] for a in alts[:5]])
            await m.answer(f"–†–∞—Å–ø–æ–∑–Ω–∞–ª(–∞): <b>{top}</b> ‚Äî –ø–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –Ω–∞—à –±—Ä–µ–Ω–¥. –í–æ—Ç –Ω–∞—à–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:", parse_mode="HTML", reply_markup=kb)
            return
    await m.answer("–ü–æ—Å–º–æ—Ç—Ä–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –Ω–∞—à—ë–ª –±—Ä–µ–Ω–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º ‚Äî –ø–æ–¥–±–µ—Ä—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.")
