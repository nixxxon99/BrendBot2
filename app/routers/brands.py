
from aiogram import Router, F
from aiogram.types import Message
from app.keyboards.common import categories_kb
from app.services.brands import categories, by_category, exact_lookup, fuzzy_suggest, get_brand
from app.services.stats import record_brand_view

router = Router()

@router.message(F.text == "üóÇÔ∏è –ú–µ–Ω—é –±—Ä–µ–Ω–¥–æ–≤")
async def show_brand_menu(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb())

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back(m: Message):
    await m.answer("–û–∫–µ–π, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–Ω–æ–≤–∞:", reply_markup=categories_kb())

# Category handlers (simple match by emoji-name)
@router.message(F.text.in_({"ü•É –í–∏—Å–∫–∏", "üßä –í–æ–¥–∫–∞", "üç∫ –ü–∏–≤–æ", "üç∑ –í–∏–Ω–æ", "ü¶å –Ø–≥–µ—Ä–º–µ–π—Å—Ç–µ—Ä"}))
async def pick_category(m: Message):
    cat_label = m.text
    mapping = {
        "ü•É –í–∏—Å–∫–∏": "–í–∏—Å–∫–∏",
        "üßä –í–æ–¥–∫–∞": "–í–æ–¥–∫–∞",
        "üç∫ –ü–∏–≤–æ": "–ü–∏–≤–æ",
        "üç∑ –í–∏–Ω–æ": "–í–∏–Ω–æ",
        "ü¶å –Ø–≥–µ—Ä–º–µ–π—Å—Ç–µ—Ä": "–õ–∏–∫—ë—Ä",
    }
    cat = mapping.get(cat_label, "")
    names = by_category(cat)
    if not names:
        await m.answer("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=categories_kb())
        return
    # Build simple keyboard list
    from aiogram.utils.keyboard import ReplyKeyboardBuilder
    from aiogram.types import KeyboardButton
    kb = ReplyKeyboardBuilder()
    for n in names:
        kb.add(KeyboardButton(text=n))
    kb.add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
    kb.adjust(2)
    await m.answer(f"–í—ã–±–µ—Ä–∏ –±—Ä–µ–Ω–¥ ({cat}):", reply_markup=kb.as_markup(resize_keyboard=True))

# Exact brand lookup by text (from catalog/aliases)
@router.message(lambda m: m.text is not None and exact_lookup(m.text) is not None)
async def send_brand_card(m: Message):
    name = exact_lookup(m.text)
    item = get_brand(name)
    if not item:
        await m.answer("–ù–µ –Ω–∞—à—ë–ª –±—Ä–µ–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    record_brand_view(m.from_user.id, name, item["category"])
    await m.answer_photo(photo=item["photo_file_id"], caption=item["caption"], parse_mode="HTML")

# Fuzzy suggestions when user types free text
@router.message(lambda m: m.text is not None and exact_lookup(m.text) is None)
async def suggest(m: Message):
    qs = m.text.strip()
    suggestions = fuzzy_suggest(qs, limit=6)
    if not suggestions:
        return
    from aiogram.utils.keyboard import ReplyKeyboardBuilder
    from aiogram.types import KeyboardButton
    kb = ReplyKeyboardBuilder()
    for name, score in suggestions:
        kb.add(KeyboardButton(text=name))
    kb.add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
    kb.adjust(1)
    await m.answer("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏:", reply_markup=kb.as_markup(resize_keyboard=True))
