from __future__ import annotations
import random, json
from aiogram import Router, F
from aiogram.types import Message
from app.services.stats import inc_points, inc_tests

router = Router()

# Load catalog
try:
    _CAT = json.load(open("data/catalog.json", "r", encoding="utf-8"))
except Exception:
    _CAT = {}

def _pick_brand() -> tuple[str, dict]:
    items = list(_CAT.items())
    if not items:
        return ("", {})
    return random.choice(items)

@router.message(F.text == "üß© –ö–≤–∏–∑")
async def start_quiz(m: Message):
    name, card = _pick_brand()
    if not card:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–≤–∏–∑–∞. –î–æ–±–∞–≤—å –±—Ä–µ–Ω–¥—ã –≤ data/catalog.json")
        return
    qtype = random.choice(["country", "abv", "category"])
    if qtype == "country":
        await m.answer(f"–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ <b>{name}</b>?")
    elif qtype == "abv":
        await m.answer(f"–ö—Ä–µ–ø–æ—Å—Ç—å (ABV) —É <b>{name}</b>? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40%)")
    else:
        await m.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—Ä–µ–Ω–¥–∞ <b>{name}</b>? (–≤–∏—Å–∫–∏/–≤–æ–¥–∫–∞/–ø–∏–≤–æ/–≤–∏–Ω–æ/‚Ä¶)")
    # store the expected answer in message thread state memory (minimalistic)
    m.bot.data.setdefault("quiz_state", {})[m.from_user.id] = (qtype, name, card)

@router.message(F.text.regexp(".+"))
async def answer_quiz(m: Message):
    state = m.bot.data.get("quiz_state", {}).get(m.from_user.id)
    if not state:
        return
    qtype, name, card = state
    user = (m.text or "").strip().lower()
    truth = ""
    if qtype == "country":
        truth = (card.get("country") or "").lower()
    elif qtype == "abv":
        truth = (card.get("abv") or "").lower()
    else:
        truth = (card.get("category") or "").lower()
    if not truth:
        await m.answer("–ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ ‚Äî –æ–±–Ω–æ–≤–∏ data/catalog.json")
        return
    # naive check
    ok = truth.split("%")[0] in user
    if ok:
        inc_points(m.from_user.id, 1)
        inc_tests(m.from_user.id, 1)
        await m.answer(f"–í–µ—Ä–Ω–æ ‚úÖ
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{truth}</b>
–ï—â—ë —Ä–∞–∑ ‚Äî –Ω–∞–∂–º–∏ ¬´üß© –ö–≤–∏–∑¬ª.")
    else:
        await m.answer(f"–ù–µ —Å–æ–≤—Å–µ–º. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{truth}</b>
–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë: ¬´üß© –ö–≤–∏–∑¬ª.")
    # clear state
    m.bot.data.get("quiz_state", {}).pop(m.from_user.id, None)
